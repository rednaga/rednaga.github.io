<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RedNaga Security</title>
  <subtitle>spicy security research</subtitle>
  <link href="/rss2.xml" rel="self"/>
  
  <link href="https://rednaga.github.io/"/>
  <updated>2016-08-01T06:26:16.000Z</updated>
  <id>https://rednaga.github.io/</id>
  
  <author>
    <name>RedNaga</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Detecting Pirated and Malicious Android Apps with APKiD</title>
    <link href="https://rednaga.github.io/2016/07/31/detecting_pirated_and_malicious_android_apps_with_apkid/"/>
    <id>https://rednaga.github.io/2016/07/31/detecting_pirated_and_malicious_android_apps_with_apkid/</id>
    <published>2016-07-31T07:00:00.000Z</published>
    <updated>2016-08-01T06:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android apps are much easier to modify than those of traditional desktop operating systems like Windows or Linux, and there’s primarily only <em>one</em> way to modify Android apps after they have been compiled from source: <a href="https://mvnrepository.com/artifact/org.smali/dexlib2" target="_blank" rel="external">dexlib</a>. Even if you’re actually using <a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a> or <a href="https://github.com/JesusFreke/smali" target="_blank" rel="external">Smali</a>, they are both using dexlib under the hood. Actually, Apktool uses Smali, and Smali and dexlib are part of the same project.</p>
<p>Why is this important? Any app which has had malware injected into it or has been cracked or pirated will have <em>probably</em> been disassembled and recompiled by dexlib. Also, there are very few reasons why a developer with access to the source code would use dexlib. Therefore, you know an app has been modified by dexlib, it’s probably interesting to you if you’re worried about malware or app piracy. This is where <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a> comes in. In addition to detecting packers, obfuscators, and other weird stuff, it can also identify if an app was compiled by the standard Android compilers or dexlib.<br><a id="more"></a></p>
<h1 id="APKiD"><a href="#APKiD" class="headerlink" title="APKiD"></a>APKiD</h1><p>APKiD can look at an Android APK or DEX file and detect the fingerprints of several different compilers:</p>
<ul>
<li>dx - standard Android SDK compiler</li>
<li>dexmerge - used for incremental builds by some IDEs (after using dx)</li>
<li>dexlib 1.x</li>
<li>dexlib 2.x beta</li>
<li>dexlib 2.x</li>
</ul>
<p>If any of the dexlib families have been used to create a DEX file, you can be fairly suspicious it has been cracked and it may have been injected with malware. For more info on how we used compiler fingerprinting to detect malware and cracks, check out our talk <a href="/2016/07/30/apkid_and_android_compiler_fingerprinting/">Android Compiler Fingerprinting</a>.</p>
<h2 id="Detecting-dx-and-dexmerge"><a href="#Detecting-dx-and-dexmerge" class="headerlink" title="Detecting dx and dexmerge"></a>Detecting dx and dexmerge</h2><p>The main way dx and dexmerge are identified are by looking at the ordering of the map types in the DEX file.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_type_order.png" alt=""></p>
<p>This is a good place to identify different compilers because the order is not defined in the spec so it’s up to the compiler how it wants to order these things.</p>
<p>In order to have something that’s copy / paste-able, here’s some Java code for the normal type order:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TypeCode[] NORMAL_TYPE_ORDER = <span class="keyword">new</span> TypeCode[] &#123;</div><div class="line">  TypeCode.HEADER_ITEM,</div><div class="line">  TypeCode.STRING_ID_ITEM,</div><div class="line">  TypeCode.TYPE_ID_ITEM,</div><div class="line">  TypeCode.PROTO_ID_ITEM,</div><div class="line">  TypeCode.FIELD_ID_ITEM,</div><div class="line">  TypeCode.METHOD_ID_ITEM,</div><div class="line">  TypeCode.CLASS_DEF_ITEM,</div><div class="line">  TypeCode.ANNOTATION_SET_REF_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_ITEM,</div><div class="line">  TypeCode.CODE_ITEM,</div><div class="line">  TypeCode.ANNOTATIONS_DIRECTORY_ITEM,</div><div class="line">  TypeCode.TYPE_LIST,</div><div class="line">  TypeCode.STRING_DATA_ITEM,</div><div class="line">  TypeCode.DEBUG_INFO_ITEM,</div><div class="line">  TypeCode.ANNOTATION_ITEM,</div><div class="line">  TypeCode.ENCODED_ARRAY_ITEM,</div><div class="line">  TypeCode.CLASS_DATA_ITEM,</div><div class="line">  TypeCode.MAP_LIST</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>The dexmerge type order was derived by looking at <a href="http://osxr.org/android/source/dalvik/dx/src/com/android/dx/merge/DexMerger.java#0111" target="_blank" rel="external">DexMerger.java</a>. I got the typeIds order by looking <a href="http://osxr.org/android/source/dalvik/dx/src/com/android/dx/merge/DexMerger.java#0904" target="_blank" rel="external">here</a>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TypeCode[] DEXMERGE_TYPE_ORDER = <span class="keyword">new</span> TypeCode[] &#123;</div><div class="line">  TypeCode.HEADER_ITEM,</div><div class="line">  TypeCode.STRING_ID_ITEM,</div><div class="line">  TypeCode.TYPE_ID_ITEM,</div><div class="line">  TypeCode.PROTO_ID_ITEM,</div><div class="line">  TypeCode.FIELD_ID_ITEM,</div><div class="line">  TypeCode.METHOD_ID_ITEM,</div><div class="line">  TypeCode.CLASS_DEF_ITEM,</div><div class="line">  TypeCode.MAP_LIST,</div><div class="line">  TypeCode.TYPE_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_REF_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_ITEM,</div><div class="line">  TypeCode.CLASS_DATA_ITEM,</div><div class="line">  TypeCode.CODE_ITEM,</div><div class="line">  TypeCode.STRING_DATA_ITEM,</div><div class="line">  TypeCode.DEBUG_INFO_ITEM,</div><div class="line">  TypeCode.ANNOTATION_ITEM,</div><div class="line">  TypeCode.ENCODED_ARRAY_ITEM,</div><div class="line">  TypeCode.ANNOTATIONS_DIRECTORY_ITEM</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>In general, the format of a DEX file and the items inside are like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">header</div><div class="line">  HEADER_ITEM</div><div class="line">stringIds</div><div class="line">  STRING_ID_ITEM</div><div class="line">typeIds</div><div class="line">  TYPE_ID_ITEM</div><div class="line">protoIds</div><div class="line">  PROTO_ID_ITEM</div><div class="line">fieldIds</div><div class="line">  FIELD_ID_ITEM</div><div class="line">methodIds</div><div class="line">  METHOD_ID_ITEM</div><div class="line">classDefs</div><div class="line">  CLASS_DEF_ITEM</div><div class="line">wordData (sort by TYPE)</div><div class="line">  ANNOTATION_SET_REF_LIST</div><div class="line">  ANNOTATION_SET_ITEM</div><div class="line">  CODE_ITEM</div><div class="line">  ANNOTATIONS_DIRECTORY_ITEM</div><div class="line">typeLists (no sort)</div><div class="line">  TYPE_LIST</div><div class="line">stringData (sort by INSTANCE)</div><div class="line">  STRING_DATA_ITEM</div><div class="line">byteData (sort by TYPE)</div><div class="line">  DEBUG_INFO_ITEM</div><div class="line">  ANNOTATION_ITEM</div><div class="line">  ENCODED_ARRAY_ITEM</div><div class="line">classData (no sort)</div><div class="line">  CLASS_DATA_ITEM</div><div class="line">map (no sort)</div><div class="line">  MAP_LIST</div></pre></td></tr></table></figure>
<p>This list may be handy for ongoing research into fingerprinting different compilers.</p>
<h2 id="Detecting-dexlib-1-x"><a href="#Detecting-dexlib-1-x" class="headerlink" title="Detecting dexlib 1.x"></a>Detecting dexlib 1.x</h2><p>This is the first library that allowed disassembling and compiling of DEX files without the source code. It was created by Ben “Jesus Freke” Gruver. It’s detected primarily by looking at the physical sorting of the strings.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_string_sort.png" alt=""></p>
<p>The DEX format requires that the string table, which list all the strings and their offset into the file, must be sorted alphabetically, but the actual physical ordering of the strings in the file are not necessarily sorted. So while dx sorts strings alphabetically, even though it doesn’t have to, dexlib seems to sort them physically based on when they’re encountered during compilation.</p>
<p>A lot of commercial packers and obfuscators and certain malware families still use dexlib 1.x under the hood because it’s pretty solid and they’re too lazy to update.</p>
<h2 id="Detecting-dexlib-2-x-beta"><a href="#Detecting-dexlib-2-x-beta" class="headerlink" title="Detecting dexlib 2.x beta"></a>Detecting dexlib 2.x beta</h2><p>Dexlib 1.x was rewritten into dexlib 2, and while it was in a beta release, we noticed that it did something weird with how it marked class interfaces.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_class_interfaces.png" alt=""></p>
<p>You can see <code>AC 27 00 00</code> all over the file. That’s the offset to the “null” interface for classes which don’t implement any interface. It’s a good example of how flexible the DEX format is, because I would figure this wouldn’t run at all, but it does. The dx compiler just uses <code>00</code>s to indicate that there’s no interface.</p>
<p>This was removed before dexlib 2.x was moved out of beta.</p>
<h2 id="Detecting-dexlib-2-x"><a href="#Detecting-dexlib-2-x" class="headerlink" title="Detecting dexlib 2.x"></a>Detecting dexlib 2.x</h2><p>This compiler is also detected by also looking at the map type order. Assembling a DEX file is complex and there are a lot of tiny little details you need to mimic to create an absolutely perfect facsimile. That’s a lot of extra work most developers don’t want to do.</p>
<p>As an aside, I spend a lot of time using this library and looking at it’s code while working on a generic Android deobfuscator called <a href="https://travis-ci.org/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>. And I’ve got to say, it’s some really impressive and <em>clean</em> code that I’ve learned a lot from. Kudos to <a href="https://github.com/JesusFreke" target="_blank" rel="external">Ben</a>.</p>
<h1 id="Using-APKiD"><a href="#Using-APKiD" class="headerlink" title="Using APKiD"></a>Using APKiD</h1><p>The usage of APKiD is quite simple. You just point it at folders, files, whatever, and it’ll try and find APKs and DEX files. It’ll also decompose APKs and try and find compressed APKs, DEX, and ELF files. Here’s output of an example run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ apkid test-data/apk test-data/dex</div><div class="line">[!] APKiD 0.9.3 :: from RedNaga :: rednaga.io</div><div class="line">[*] test-data/dex/dexguard1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard2.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard3.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexlib1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/dex/dexlib2.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/dex/dexmerge.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge)</div><div class="line">[*] test-data/dex/dexprotector1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector2.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector3.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dx.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div></pre></td></tr></table></figure>
<p>You can see that the test samples of DexGuard and DexProtector both use dexlib 1.x. APKiD also supports JSON output so it’s easier to integrate into other toolchains:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"test-data/dex/dexprotector1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexProtect"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexlib1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard3.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"anti_disassembly"</span>: [</div><div class="line">      <span class="string">"illegal class name"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexlib2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 2.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexmerge.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"Android SDK (dexmerge)"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dx.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"Android SDK (dx)"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"anti_disassembly"</span>: [</div><div class="line">      <span class="string">"illegal class name"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexprotector2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexProtect"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Ideas-for-the-Future"><a href="#Ideas-for-the-Future" class="headerlink" title="Ideas for the Future"></a>Ideas for the Future</h2><p>This post leaves out all of the Android XML fingerprinting details <a href="https://github.com/strazzere" target="_blank" rel="external">Tim</a> researched that can identify tools like Apktool. We still need to add these fingerprints into APKiD.</p>
<p>There is also a library called ASMDEX which looks capable of creating DEX files. At the time of this original research a few years ago, I didn’t have time to look into it, and no one was talking about how to use it. A lot of the stuff was over my head, but I’ve since had a lot of practice using ASM to create Java class files, so I think I can manage now. It would be nice to add fingerprints for ASMDEX. Anything created by that would probably be pretty weird.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android apps are much easier to modify than those of traditional desktop operating systems like Windows or Linux, and there’s primarily only &lt;em&gt;one&lt;/em&gt; way to modify Android apps after they have been compiled from source: &lt;a href=&quot;https://mvnrepository.com/artifact/org.smali/dexlib2&quot;&gt;dexlib&lt;/a&gt;. Even if you’re actually using &lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot;&gt;Apktool&lt;/a&gt; or &lt;a href=&quot;https://github.com/JesusFreke/smali&quot;&gt;Smali&lt;/a&gt;, they are both using dexlib under the hood. Actually, Apktool uses Smali, and Smali and dexlib are part of the same project.&lt;/p&gt;
&lt;p&gt;Why is this important? Any app which has had malware injected into it or has been cracked or pirated will have &lt;em&gt;probably&lt;/em&gt; been disassembled and recompiled by dexlib. Also, there are very few reasons why a developer with access to the source code would use dexlib. Therefore, you know an app has been modified by dexlib, it’s probably interesting to you if you’re worried about malware or app piracy. This is where &lt;a href=&quot;https://github.com/rednaga/APKiD&quot;&gt;APKiD&lt;/a&gt; comes in. In addition to detecting packers, obfuscators, and other weird stuff, it can also identify if an app was compiled by the standard Android compilers or dexlib.&lt;br&gt;
    
    </summary>
    
    
      <category term="apkid" scheme="https://rednaga.github.io/tags/apkid/"/>
    
      <category term="research" scheme="https://rednaga.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>APKiD and Android Compiler Fingerprinting</title>
    <link href="https://rednaga.github.io/2016/07/30/apkid_and_android_compiler_fingerprinting/"/>
    <id>https://rednaga.github.io/2016/07/30/apkid_and_android_compiler_fingerprinting/</id>
    <published>2016-07-30T07:00:00.000Z</published>
    <updated>2016-08-01T06:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>We recently gave a presentation at <a href="http://hitcon.org/2016/CMT/" target="_blank" rel="external">HITCON 2016</a> called <a href="http://hitcon.org/2016/CMT/slide/day1-r0-e-1.pdf" target="_blank" rel="external">Android Compiler Fingerprinting</a><br> where in we released a tool called: <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a>. It’s basically PEiD for Android – it detects several compilers, obfuscators, and packers and we’re adding to it whenever we find new stuff. You’re welcome to submit your rules also.</p>
<p>Here’s the full abstract:</p>
<blockquote>
<p>Compiler fingerprinting is a technique for identifying the compiler used to create a binary. This is because there is some flexibility in file formats, and different compilers usually produce binaries with identical behaviors but with subtle differences in structure and organization. We developed a tool which can determine the compiler used to create Dalvik executables and Android binary XML files. This allowed us to distinguish between apps compiled from original source code and apps which had been modified using non-standard compilers such as dexlib. Our hypothesis was that the two primary reasons reasons for modifying an Android app were for 1.) cracking and piracy and 2.) injecting malicious code. We tested this assumption by comparing the compiler profiles of various app markets with varying tolerances for cracked and malicious apps to see if the percentage of modified apps was inversely proportional to how strict the store was about policing submissions. We found that strict markets such as Google Play and Amazon had significantly lower rates of modified apps compared to less strict markets such as Aptoide and BlapkMarket. Additionally, we analyzed ~138,000 benign apps and known malware samples to compare the rates of modification between both groups. We found much higher rates of modification within the malware sample set with many malware families consisting entirely of modified apps.</p>
<p>This talk presents the history and evolution of various Android tools, introduces tools for fingerprinting compilers, summarizes the technical details for how the tools work, and reviews applications for using compiler fingerprinting to improve detection and classification of malware and pirated apps.</p>
</blockquote>
<p>We’ll post the video of our talk as soon as it’s available!</p>
<a id="more"></a>
<p>This is the output when it’s run against our test files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">$ apkid test-data</div><div class="line">[!] APKiD 0.9.3 :: from RedNaga :: rednaga.io</div><div class="line">[*] test-data/apk/dexguard1.apk!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/dexguard2.apk!classes.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/dexguard_6_1.apk!classes.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/pikekapril.apk!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : Bitwise AntiSkid</div><div class="line">[*] test-data/dex/big-endian.dex</div><div class="line"> |-&gt; abnormal : non little-endian format</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/dexguard1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard2.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard3.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexlib1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/dex/dexlib2.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/dex/dexmerge.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge)</div><div class="line">[*] test-data/dex/dexprotector1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector2.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector3.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dx.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non-standard-header.dex</div><div class="line"> |-&gt; abnormal : non-standard header size</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non_zero_link_offset.dex</div><div class="line"> |-&gt; abnormal, anti_disassembly : non-zero link offset</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non_zero_link_size.dex</div><div class="line"> |-&gt; abnormal, anti_disassembly : non-zero link size</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/alibaba/apk/071d9e73a1badf763bc6bb843c51c208ad17c91b24192e79f045ed1e4fc8148a</div><div class="line"> |-&gt; packer : Alibaba</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337</div><div class="line"> |-&gt; packer : APKProtect</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337!res/raw/ister2015050620.apk</div><div class="line"> |-&gt; packer : Bangcle</div><div class="line">[*] test-data/samples/baidu/ae369707b32a37f2b5c78f27418f90c54c7f84d5fd8f96a9e1595e27182b3173</div><div class="line"> |-&gt; packer : Baidu</div><div class="line">[*] test-data/samples/baidu/ae369707b32a37f2b5c78f27418f90c54c7f84d5fd8f96a9e1595e27182b3173!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413</div><div class="line"> |-&gt; packer : Bangcle</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413!assets/com.mobi.screensaver.kansiphone3</div><div class="line"> |-&gt; packer : Bangcle/SecNeo (UPX)</div><div class="line">[*] test-data/samples/bangcle/elf/bf286487b7bbd549b8cdb00dc9a80a5404ed68103ff0fffd94a85907db9c439d</div><div class="line"> |-&gt; packer : newer-style Bangcle/SecNeo (UPX)</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3</div><div class="line"> |-&gt; packer : Ijiami</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3!assets/ijm_lib/armeabi/libexec.so</div><div class="line"> |-&gt; packer : Ijiami (UPX)</div><div class="line">[*] test-data/samples/jiangu/f8493d91c4250cff4d4f9a47538a2b0b39f7c4d87e6fe4035d4c304c70b5ad1c</div><div class="line"> |-&gt; packer : Jiangu</div><div class="line">[*] test-data/samples/jiangu/f8493d91c4250cff4d4f9a47538a2b0b39f7c4d87e6fe4035d4c304c70b5ad1c!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/kiro/061af556e934fec5fdcbec732bc7128cbf5a45012310fc8ee2f39e26bd81e982</div><div class="line"> |-&gt; packer : Kiro</div><div class="line">[*] test-data/samples/kiro/061af556e934fec5fdcbec732bc7128cbf5a45012310fc8ee2f39e26bd81e982!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/level/c2d3ceea0dda80e80d7def8e9ea127b9a633208ffcb106c5db3674e1c58baac4</div><div class="line"> |-&gt; packer : &apos;qdbh&apos; (?)</div><div class="line">[*] test-data/samples/liapp/b5be20d225edf55634621aa17988a6ed3368d4f7632c8a1eb4d3fc3b6a61c325</div><div class="line"> |-&gt; packer : LIAPP</div><div class="line">[*] test-data/samples/liapp/b5be20d225edf55634621aa17988a6ed3368d4f7632c8a1eb4d3fc3b6a61c325!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/medusa/b92c0090038f3185908f2fb3b7e927da734040b9332332fc09542e20c615e083</div><div class="line"> |-&gt; packer : Medusa</div><div class="line">[*] test-data/samples/medusa/b92c0090038f3185908f2fb3b7e927da734040b9332332fc09542e20c615e083!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/naga/89297d34ee79adf8390a173aefd31e65c47e18c7dfc0a3f1508ca2255991efb2</div><div class="line"> |-&gt; packer : Naga</div><div class="line">[*] test-data/samples/naga/89297d34ee79adf8390a173aefd31e65c47e18c7dfc0a3f1508ca2255991efb2!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/nqshield/997a3986cc8437772b569d0319044764a1cbac9d296af01d77c857b887c49b48</div><div class="line"> |-&gt; packer : NQ Shield</div><div class="line">[*] test-data/samples/nqshield/997a3986cc8437772b569d0319044764a1cbac9d296af01d77c857b887c49b48!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/qihoo360/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727</div><div class="line"> |-&gt; packer : Qihoo 360, Tencent</div><div class="line">[*] test-data/samples/qihoo360/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/rootkit/5ddda7355599a1819e03ee881e56453f492f6cf03674347513bf26f83b81a415</div><div class="line"> |-&gt; packer : UPX (unknown, unmodified)</div><div class="line">[*] test-data/samples/tencent/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727</div><div class="line"> |-&gt; packer : Qihoo 360, Tencent</div><div class="line">[*] test-data/samples/tencent/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/unicom_sdk/bb11a710258077213ce4281e78a1c19a940c02dc3ddaa5f1d8046380173e0da7</div><div class="line"> |-&gt; packer : Unicom SDK Loader</div><div class="line">[*] test-data/samples/unicom_sdk/bb11a710258077213ce4281e78a1c19a940c02dc3ddaa5f1d8046380173e0da7!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge), dexlib 1.x</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We recently gave a presentation at &lt;a href=&quot;http://hitcon.org/2016/CMT/&quot;&gt;HITCON 2016&lt;/a&gt; called &lt;a href=&quot;http://hitcon.org/2016/CMT/slide/day1-r0-e-1.pdf&quot;&gt;Android Compiler Fingerprinting&lt;/a&gt;&lt;br&gt; where in we released a tool called: &lt;a href=&quot;https://github.com/rednaga/APKiD&quot;&gt;APKiD&lt;/a&gt;. It’s basically PEiD for Android – it detects several compilers, obfuscators, and packers and we’re adding to it whenever we find new stuff. You’re welcome to submit your rules also.&lt;/p&gt;
&lt;p&gt;Here’s the full abstract:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compiler fingerprinting is a technique for identifying the compiler used to create a binary. This is because there is some flexibility in file formats, and different compilers usually produce binaries with identical behaviors but with subtle differences in structure and organization. We developed a tool which can determine the compiler used to create Dalvik executables and Android binary XML files. This allowed us to distinguish between apps compiled from original source code and apps which had been modified using non-standard compilers such as dexlib. Our hypothesis was that the two primary reasons reasons for modifying an Android app were for 1.) cracking and piracy and 2.) injecting malicious code. We tested this assumption by comparing the compiler profiles of various app markets with varying tolerances for cracked and malicious apps to see if the percentage of modified apps was inversely proportional to how strict the store was about policing submissions. We found that strict markets such as Google Play and Amazon had significantly lower rates of modified apps compared to less strict markets such as Aptoide and BlapkMarket. Additionally, we analyzed ~138,000 benign apps and known malware samples to compare the rates of modification between both groups. We found much higher rates of modification within the malware sample set with many malware families consisting entirely of modified apps.&lt;/p&gt;
&lt;p&gt;This talk presents the history and evolution of various Android tools, introduces tools for fingerprinting compilers, summarizes the technical details for how the tools work, and reviews applications for using compiler fingerprinting to improve detection and classification of malware and pirated apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’ll post the video of our talk as soon as it’s available!&lt;/p&gt;
    
    </summary>
    
    
      <category term="apkid" scheme="https://rednaga.github.io/tags/apkid/"/>
    
      <category term="research" scheme="https://rednaga.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to RedNaga</title>
    <link href="https://rednaga.github.io/2016/07/19/welcome/"/>
    <id>https://rednaga.github.io/2016/07/19/welcome/</id>
    <published>2016-07-19T07:00:00.000Z</published>
    <updated>2016-08-01T06:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to our  blog. More to come shortly…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to our  blog. More to come shortly…&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
