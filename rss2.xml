<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RedNaga Security</title>
  <subtitle>spicy security research</subtitle>
  <link href="/rss2.xml" rel="self"/>
  
  <link href="https://rednaga.github.io/"/>
  <updated>2016-09-23T23:10:45.000Z</updated>
  <id>https://rednaga.github.io/</id>
  
  <author>
    <name>RedNaga</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reversing GO binaries like a pro</title>
    <link href="https://rednaga.github.io/2016/09/21/reversing_go_binaries_like_a_pro/"/>
    <id>https://rednaga.github.io/2016/09/21/reversing_go_binaries_like_a_pro/</id>
    <published>2016-09-21T07:00:00.000Z</published>
    <updated>2016-09-23T23:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>GO binaries are weird, or at least, that is where this all started out. While delving into some <a href="http://securityaffairs.co/wordpress/50556/malware/linux-rex-1-botnet.html" target="_blank" rel="external">Linux malware named Rex</a>, I came to the realization that I might need to understand more than I wanted to. Just the prior week I had been reversing <a href="https://news.drweb.com/news/?i=10140&amp;lng=en" target="_blank" rel="external">Linux Lady</a> which was also written in GO, however it was not a stripped binary so it was pretty easy. Clearly the binary was rather large, many extra methods I didn’t care about - though I really just didn’t understand why. To be honest - I still haven’t fully dug into the Golang code and have yet to really write much code in Go, so take this information at face value as some of it might be incorrect; this is just my experience while reversing some ELF Go binaries!</p>
<p>To illistrate some of my examples I’m going to use an extremely simple ‘Hello, World!’ example and also reference the Rex malware. The code and a Make file are extremely simple;</p>
<figure class="highlight go"><figcaption><span>Hello.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"Hello, World!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">all:</div><div class="line">	GOOS=linux GOARCH=386 go build -o hello-stripped -ldflags <span class="string">"-s"</span> hello.go</div><div class="line">	GOOS=linux GOARCH=386 go build -o hello-normal hello.go</div></pre></td></tr></table></figure>
<p>Since I’m working on an OSX machine, the above <code>GOOS</code> and <code>GOARCH</code> variables are explicitly needed to cross-compile this correctly. The first line also added the <code>ldflags</code> option to strip the binary. This way we can analyze the same executable both stripped and without being stripped. Copy these files, run <code>make</code> and then open up the files in your disassembler of choice, for this blog I’m going to use IDA Pro. If we open up the unstripped binary in IDA Pro we can notice a few quick things;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/unstripped_main.png" alt=""></p>
<p>Well then - our 5 lines of code has turned into over 2058 functions. With all that overhead of what appears to be a runtime, we also have nothing interesting in the <code>main()</code> function. If we dig in a bit further we can see that the actual code we’re interested in is inside of <code>main_main</code>;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/unstripped_main_main.png" alt=""></p>
<p>This is, well, lots of code that I honestly don’t want to look at. The string loading also looks a bit weird - though IDA seems to have done a good job identifying the necessary bits. We can easily see that the string load is actually a set of three <code>mov</code>s;</p>
<figure class="highlight plain"><figcaption><span>String load</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov     ebx, offset aHelloWorld ; &quot;Hello, World!&quot;</div><div class="line">mov     [esp+3Ch+var_14], ebx ; Shove string into location</div><div class="line">mov     [esp+3Ch+var_10], 0Dh ; length of string</div></pre></td></tr></table></figure>
<p>This isn’t exactly revolutionary, though I can’t off the top of my head say that I’ve seen something like this before. We’re also taking note of it as this will come in handle later on. The other tidbit of code which caught my eye was the <code>runtime_morestack_context</code> call;</p>
<figure class="highlight plain"><figcaption><span>morestack_context</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">loc_80490CB:</div><div class="line">call    runtime_morestack_noctxt</div><div class="line">jmp     main_main</div></pre></td></tr></table></figure>
<p>This style block of code appears to always be at the end of functions and it also seems to always loop back up to the top of the same function. This is verified by looking at the cross-references to this function. Ok, now that we know IDA Pro can handle unstripped binaries, lets load the same code but the stripped version this time.</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_start.png" alt=""></p>
<p>Immediately we see some, well, lets just call them “differences”. We have 1329 functions defined and now seem some undefined code by looking at the navigator toolbar. Luckily IDA has still been able to find the string load we are looking for, however this function now seems much less friendly to deal with.</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_main_main.png" alt=""></p>
<p>We now have no more function names, however - the function names appear to be retained in a specific section of the binary if we do a string search for <code>main.main</code> (which would be repesented at <code>main_main</code> in the previous screen shots due to how a <code>.</code> is interpreted by IDA);</p>
<figure class="highlight plain"><figcaption><span>.gopclntab</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.gopclntab:0813E174                 db  6Dh ; m</div><div class="line">.gopclntab:0813E175                 db  61h ; a</div><div class="line">.gopclntab:0813E176                 db  69h ; i</div><div class="line">.gopclntab:0813E177                 db  6Eh ; n</div><div class="line">.gopclntab:0813E178                 db  2Eh ; .</div><div class="line">.gopclntab:0813E179                 db  6Dh ; m</div><div class="line">.gopclntab:0813E17A                 db  61h ; a</div><div class="line">.gopclntab:0813E17B                 db  69h ; i</div><div class="line">.gopclntab:0813E17C                 db  6Eh ; n</div></pre></td></tr></table></figure>
<p>Alright, so it would appear that there is something left over here. After digging into some of the Google results into <code>gopclntab</code> and tweet about this - a friendly reverse <a href="https://twitter.com/groke1105" target="_blank" rel="external">George (Egor?) Zaytsev</a> showed me his IDA Pro scripts for <a href="https://gitlab.com/zaytsevgu/goutils" target="_blank" rel="external">renaming function and adding type information</a>. After skimming these it was pretty easy to figure out the format of this section so I through together some functionally to replicate his script. The essential code is shown below, very simply put, we look into the segment <code>.gopclntab</code> and skip the first 8 bytes. We then create a pointer (<code>Qword</code> or ~<code>Dword</code> dependant on whether the binary is 64bit or not). The first set of data actually gives us the size of the <code>.gopclntab</code> table, so we know how far to go into this structure. Now we can start processing the rest of the data which appears to be the <code>function_offset</code> followed by the (function) <code>name_offset</code>). As we create pointers to these offsets and also tell IDA to create the strings, we just need to ensure we don’t pass <code>MakeString</code> any bad characters so we use the <code>clean_function_name</code> function to strip out any badness. </p>
<figure class="highlight python"><figcaption><span>renamer.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pointer</span><span class="params">(addr, force_size=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> force_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">4</span> <span class="keyword">and</span> (idaapi.get_inf_structure().is_64bit() <span class="keyword">or</span> force_size <span class="keyword">is</span> <span class="number">8</span>):</div><div class="line">        MakeQword(addr)</div><div class="line">	<span class="keyword">return</span> Qword(addr), <span class="number">8</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">	MakeDword(addr)</div><div class="line">	<span class="keyword">return</span> Dword(addr), <span class="number">4</span></div><div class="line"></div><div class="line">STRIP_CHARS = [ <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'['</span>, <span class="string">']'</span>, <span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>, <span class="string">' '</span>, <span class="string">'"'</span> ]</div><div class="line">REPLACE_CHARS = [<span class="string">'.'</span>, <span class="string">'*'</span>, <span class="string">'-'</span>, <span class="string">','</span>, <span class="string">';'</span>, <span class="string">':'</span>, <span class="string">'/'</span>, <span class="string">'\xb7'</span> ]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_function_name</span><span class="params">(str)</span>:</span></div><div class="line">    <span class="comment"># Kill generic 'bad' characters</span></div><div class="line">    str = filter(<span class="keyword">lambda</span> x: x <span class="keyword">in</span> string.printable, str)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> STRIP_CHARS:</div><div class="line">        str = str.replace(c, <span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> REPLACE_CHARS:</div><div class="line">        str = str.replace(c, <span class="string">'_'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> str</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">renamer_init</span><span class="params">()</span>:</span></div><div class="line">    renamed = <span class="number">0</span></div><div class="line"></div><div class="line">    gopclntab = ida_segment.get_segm_by_name(<span class="string">'.gopclntab'</span>)</div><div class="line">    <span class="keyword">if</span> gopclntab <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="comment"># Skip unimportant header and goto section size</span></div><div class="line">        addr = gopclntab.startEA + <span class="number">8</span></div><div class="line">        size, addr_size = create_pointer(addr)</div><div class="line">        addr += addr_size</div><div class="line"></div><div class="line">        <span class="comment"># Unsure if this end is correct</span></div><div class="line">        early_end = addr + (size * addr_size * <span class="number">2</span>)</div><div class="line">        <span class="keyword">while</span> addr &lt; early_end:</div><div class="line">            func_offset, addr_size = create_pointer(addr)</div><div class="line">            name_offset, addr_size = create_pointer(addr + addr_size)</div><div class="line">            addr += addr_size * <span class="number">2</span></div><div class="line"></div><div class="line">            func_name_addr = Dword(name_offset + gopclntab.startEA + addr_size) + gopclntab.startEA</div><div class="line">            func_name = GetString(func_name_addr)</div><div class="line">            MakeStr(func_name_addr, func_name_addr + len(func_name))</div><div class="line">            appended = clean_func_name = clean_function_name(func_name)</div><div class="line">            debug(<span class="string">'Going to remap function at 0x%x with %s - cleaned up as %s'</span> % (func_offset, func_name, clean_func_name))</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ida_funcs.get_func_name(func_offset) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">if</span> MakeName(func_offset, clean_func_name):</div><div class="line">                    renamed += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    error(<span class="string">'clean_func_name error %s'</span> % clean_func_name)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> renamed</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    renamed = renamer_init()</div><div class="line">    info(<span class="string">'Found and successfully renamed %d functions!'</span> % renamed)</div></pre></td></tr></table></figure>
<p>The above code won’t actually run yet (don’t worry I’ll post the full code) but it hopefully simple enough to read through and understand the process. However, this still doesn’t solve the problem that IDA Pro doesn’t know <em>all</em> the functions. So this is going to create pointers which we aren’t being referenced anywhere. We do know the beginning of functions now, however I ended up seeing (what I think is) an easier way to define all the functions in the application. We can define all the functions by utilizing <code>runtime_morestack_noctxt</code> function. Since every function utilizes this (basically, there is an edgecase it turns out), if we find this function and traverse backwards to the cross references to this function, then we will know where every function exists. So what, right? We already know where ever function started from the segment we just parsed above, right? Ah, well - now we know the end of the function <em>and</em> the next instruction after the call to <code>runtime_morestack_noctxt</code> gives us a jump to the top of the function. This means we should quikcly be able to give the bounds of the start and stop of a function, which is required by IDA, while seperating this from the parsing of the function names. If we open up the window for cross references to the function <code>runtime_morestack_noctxt</code> we see there are many more undefined sections calling into this. 1774 in total things reference this function, which is up from the 1329 functions IDA has already defined for us, this is highlighted by the image below;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_runtime_morestack_noctxt.png" alt=""></p>
<p>After digging into mutliple binaries we can see the <code>runtime_morestack_noctext</code> will always call into <code>runtime_morestack</code> (with context). This is the edgecase I was referencing before, so between these two functions we should be able to see cross refereneces to ever other function used in the binary. Looking at the larger of the two functions, <code>runtime_more_stack</code>, of multiple binaries tends to have an interesting layout;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/unstripped_runtime_morestack.png" alt=""></p>
<p>The part which stuck out to me was <code>mov large dword ptr ds:1003h, 0</code> - this appeared to be rather constant in all 64bit binaries I saw. So after cross compiling a few more I noticed that 32bit binaries used <code>mov qword ptr ds:1003h, 0</code>, so we will be hunting for this pattern to create a “hook” for traversing backwards on. Lucky for us, I haven’t seen an instance where IDA Pro fails to define this specific function, we don’t really need to spend much brain power mapping it out or defining it outselves. So, enough talk, lets write some code to find this function;</p>
<figure class="highlight python"><figcaption><span>find_runtime_morestack.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_runtime_ms</span><span class="params">()</span>:</span></div><div class="line">    debug(<span class="string">'Attempting to find runtime_morestack function for hooking on...'</span>)</div><div class="line"></div><div class="line">    text_seg = ida_segment.get_segm_by_name(<span class="string">'.text'</span>)</div><div class="line">    <span class="comment"># This code string appears to work for ELF32 and ELF64 AFAIK</span></div><div class="line">    runtime_ms_end = ida_search.find_text(text_seg.startEA, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"word ptr ds:1003h, 0"</span>, SEARCH_DOWN)</div><div class="line">    runtime_ms = ida_funcs.get_func(runtime_ms_end)</div><div class="line">    <span class="keyword">if</span> idc.MakeNameEx(runtime_ms.startEA, <span class="string">"runtime_morecontext"</span>, SN_PUBLIC):</div><div class="line">        debug(<span class="string">'Successfully found runtime_morecontext'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        debug(<span class="string">'Failed to rename function @ 0x%x to runtime_morestack'</span> % runtime_ms.startEA)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> runtime_ms</div></pre></td></tr></table></figure>
<p>After finding the function, we can recursively traverse backwards through all the function calls, anything which is not inside an already defined function we can now define. This is because the structure always appears to be;</p>
<figure class="highlight plain"><figcaption><span>golang_undefined_function_example</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.text:08089910				               ; Function start - however undefined currently according to IDA Pro</div><div class="line">.text:08089910 loc_8089910:                            ; CODE XREF: .text:0808994B</div><div class="line">.text:08089910                                         ; DATA XREF: sub_804B250+1A1</div><div class="line">.text:08089910                 mov     ecx, large gs:0</div><div class="line">.text:08089917                 mov     ecx, [ecx-4]</div><div class="line">.text:0808991D                 cmp     esp, [ecx+8]</div><div class="line">.text:08089920                 jbe     short loc_8089946</div><div class="line">.text:08089922                 sub     esp, 4</div><div class="line">.text:08089925                 mov     ebx, [edx+4]</div><div class="line">.text:08089928                 mov     [esp], ebx</div><div class="line">.text:0808992B                 cmp     dword ptr [esp], 0</div><div class="line">.text:0808992F                 jz      short loc_808993E</div><div class="line">.text:08089931</div><div class="line">.text:08089931 loc_8089931:                            ; CODE XREF: .text:08089944</div><div class="line">.text:08089931                 add     dword ptr [esp], 30h</div><div class="line">.text:08089935                 call    sub_8052CB0</div><div class="line">.text:0808993A                 add     esp, 4</div><div class="line">.text:0808993D                 retn</div><div class="line">.text:0808993E ; ---------------------------------------------------------------------------</div><div class="line">.text:0808993E</div><div class="line">.text:0808993E loc_808993E:                            ; CODE XREF: .text:0808992F</div><div class="line">.text:0808993E                 mov     large ds:0, eax</div><div class="line">.text:08089944                 jmp     short loc_8089931</div><div class="line">.text:08089946 ; ---------------------------------------------------------------------------</div><div class="line">.text:08089946</div><div class="line">.text:08089946 loc_8089946:                            ; CODE XREF: .text:08089920</div><div class="line">.text:08089946                 call    runtime_morestack ; &quot;Bottom&quot; of function, calls out to runtime_morestack</div><div class="line">.text:0808994B                 jmp     short loc_8089910 ; Jump back to the &quot;top&quot; of the function</div></pre></td></tr></table></figure>
<p>The above snippet is a random undefined function I pulled from the stripped example application we compiled already. Essentially by traversing backwards into every undefined function, we will land at something like line <code>0x0808994B</code> which is the <code>call runtime_morestack</code>. From here we will skip to the next instruction and ensure it is a jump above where we currently are, if this is true, we can likely assume this is the start of a function. In this example (and almost every test case I’ve run) this is true. Jumping to <code>0x08089910</code> is the start of the function, so now we have the two parameters required by <code>MakeFunction</code> function;</p>
<figure class="highlight python"><figcaption><span>traverse_functions.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_simple_wrapper</span><span class="params">(addr)</span>:</span></div><div class="line">    <span class="keyword">if</span> GetMnem(addr) == <span class="string">'xor'</span> <span class="keyword">and</span> GetOpnd(addr, <span class="number">0</span>) == <span class="string">'edx'</span> <span class="keyword">and</span>  GetOpnd(addr, <span class="number">1</span>) == <span class="string">'edx'</span>:</div><div class="line">        addr = FindCode(addr, SEARCH_DOWN)</div><div class="line">        <span class="keyword">if</span> GetMnem(addr) == <span class="string">'jmp'</span> <span class="keyword">and</span> GetOpnd(addr, <span class="number">0</span>) == <span class="string">'runtime_morestack'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_runtime_ms</span><span class="params">()</span>:</span></div><div class="line">    debug(<span class="string">'Attempting to find runtime_morestack function for hooking on...'</span>)</div><div class="line"></div><div class="line">    text_seg = ida_segment.get_segm_by_name(<span class="string">'.text'</span>)</div><div class="line">    <span class="comment"># This code string appears to work for ELF32 and ELF64 AFAIK</span></div><div class="line">    runtime_ms_end = ida_search.find_text(text_seg.startEA, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"word ptr ds:1003h, 0"</span>, SEARCH_DOWN)</div><div class="line">    runtime_ms = ida_funcs.get_func(runtime_ms_end)</div><div class="line">    <span class="keyword">if</span> idc.MakeNameEx(runtime_ms.startEA, <span class="string">"runtime_morestack"</span>, SN_PUBLIC):</div><div class="line">        debug(<span class="string">'Successfully found runtime_morestack'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        debug(<span class="string">'Failed to rename function @ 0x%x to runtime_morestack'</span> % runtime_ms.startEA)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> runtime_ms</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse_xrefs</span><span class="params">(func)</span>:</span></div><div class="line">    func_created = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> func_created</div><div class="line"></div><div class="line">    <span class="comment"># First</span></div><div class="line">    func_xref = ida_xref.get_first_cref_to(func.startEA)</div><div class="line">    <span class="comment"># Attempt to go through crefs</span></div><div class="line">    <span class="keyword">while</span> func_xref != <span class="number">0xffffffffffffffff</span>:</div><div class="line">        <span class="comment"># See if there is a function already here</span></div><div class="line">        <span class="keyword">if</span> ida_funcs.get_func(func_xref) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="comment"># Ensure instruction bit looks like a jump</span></div><div class="line">            func_end = FindCode(func_xref, SEARCH_DOWN)</div><div class="line">            <span class="keyword">if</span> GetMnem(func_end) == <span class="string">"jmp"</span>:</div><div class="line">                <span class="comment"># Ensure we're jumping back "up"</span></div><div class="line">                func_start = GetOperandValue(func_end, <span class="number">0</span>)</div><div class="line">                <span class="keyword">if</span> func_start &lt; func_xref:</div><div class="line">                    <span class="keyword">if</span> idc.MakeFunction(func_start, func_end):</div><div class="line">                        func_created += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="comment"># If this fails, we should add it to a list of failed functions</span></div><div class="line">                        <span class="comment"># Then create small "wrapper" functions and backtrack through the xrefs of this</span></div><div class="line">                        error(<span class="string">'Error trying to create a function @ 0x%x - 0x%x'</span> %(func_start, func_end))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            xref_func = ida_funcs.get_func(func_xref)</div><div class="line">            <span class="comment"># Simple wrapper is often runtime_morestack_noctxt, sometimes it isn't though...</span></div><div class="line">            <span class="keyword">if</span> is_simple_wrapper(xref_func.startEA):</div><div class="line">                debug(<span class="string">'Stepping into a simple wrapper'</span>)</div><div class="line">                func_created += traverse_xrefs(xref_func)</div><div class="line">            <span class="keyword">if</span> ida_funcs.get_func_name(xref_func.startEA) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="string">'sub_'</span> <span class="keyword">not</span> <span class="keyword">in</span> ida_funcs.get_func_name(xref_func.startEA):</div><div class="line">                debug(<span class="string">'Function @0x%x already has a name of %s; skipping...'</span> % (func_xref, ida_funcs.get_func_name(xref_func.startEA)))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                debug(<span class="string">'Function @ 0x%x already has a name %s'</span> % (xref_func.startEA, ida_funcs.get_func_name(xref_func.startEA)))</div><div class="line"></div><div class="line">        func_xref = ida_xref.get_next_cref_to(func.startEA, func_xref) </div><div class="line"></div><div class="line">    <span class="keyword">return</span> func_created</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_func_by_name</span><span class="params">(name)</span>:</span></div><div class="line">    text_seg = ida_segment.get_segm_by_name(<span class="string">'.text'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> Functions(text_seg.startEA, text_seg.endEA):</div><div class="line">        <span class="keyword">if</span> name == ida_funcs.get_func_name(addr):</div><div class="line">            <span class="keyword">return</span> ida_funcs.get_func(addr)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtime_init</span><span class="params">()</span>:</span></div><div class="line">    func_created = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> find_func_by_name(<span class="string">'runtime_morestack'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        func_created += traverse_xrefs(find_func_by_name(<span class="string">'runtime_morestack'</span>))</div><div class="line">        func_created += traverse_xrefs(find_func_by_name(<span class="string">'runtime_morestack_noctxt'</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        runtime_ms = create_runtime_ms()</div><div class="line">        func_created = traverse_xrefs(runtime_ms)</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="keyword">return</span> func_created</div></pre></td></tr></table></figure>
<p>That code bit is a bit lengthy, though hopefully the comments and concept is clear enough. It likely isn’t necessary to explicitly traverse backwards recursively, however I wrote this prior to understanding that <code>runtime_morestack_noctxt</code> (the edgecase) is the only edgecase that I would encounter. This was being handled by the <code>is_simple_wrapper</code> function originally. Regardless, running this style of code ended up finding all the extra functions IDA Pro was missing. We can see below, that this creates a much cleaner and easier experience to reverse;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_0808994B.png" alt=""></p>
<p>This can allow us to use something like <a href="https://github.com/joxeankoret/diaphora" target="_blank" rel="external">Diaphora</a> as well since we can specifically target functions with the same names, if we care too. I’ve personally found this is extremely useful for malware or other targets where you <em>really</em> don’t care about any of the framework/runtime functions. You can quiet easily differentiate between custom code written for the binary, for example in the Linux malware “Rex” everything because with that name space! Now onto the last challenge that I wanted to solve while reversing the malware, string loading! I’m honestly not 100% sure how IDA detects most string loads, potentially through idioms of some sort? Or maybe because it can detect strings based on the <code>\00</code> character at the end of it? Regardless, Go seems to use a string table of some sort, without requiring null character. The appear to be in alpha-numeric order, group by string length size as well. This means we see them all there, but often don’t come across them correctly asserted as strings, or we see them asserted as extremely large blobs of strings. The hello world example isn’t good at illistrating this, so I’ll pull open the <code>main.main</code> function of the Rex malware to show this;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_rex_no_strings.png" alt=""></p>
<p>I didn’t want to add comments to everything, so I only commented the first few lines then pointed arrows to where there should be pointers to a proper string. We can see a few different use cases and sometimes the destination registers seem to change. However there is definitely a pattern which forms that we can look for. Moving of a pointer into a register, that register is then used to push into a (d)word pointer, followed by a load of a lenght of the string. Cobbling together some python to hunt for the pattern we end with something like the pseudo code below;</p>
<figure class="highlight python"><figcaption><span>string_hunting.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Currently it's normally ebx, but could in theory be anything - seen ebp</span></div><div class="line">VALID_REGS = [<span class="string">'ebx'</span>, <span class="string">'ebp'</span>]</div><div class="line"></div><div class="line"><span class="comment"># Currently it's normally esp, but could in theory be anything - seen eax</span></div><div class="line">VALID_DEST = [<span class="string">'esp'</span>, <span class="string">'eax'</span>, <span class="string">'ecx'</span>, <span class="string">'edx'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_string_load</span><span class="params">(addr)</span>:</span></div><div class="line">    patterns = []</div><div class="line">    <span class="comment"># Check for first part</span></div><div class="line">    <span class="keyword">if</span> GetMnem(addr) == <span class="string">'mov'</span>:</div><div class="line">        <span class="comment"># Could be unk_ or asc_, ignored ones could be loc_ or inside []</span></div><div class="line">        <span class="keyword">if</span> GetOpnd(addr, <span class="number">0</span>) <span class="keyword">in</span> VALID_REGS <span class="keyword">and</span> <span class="keyword">not</span> (<span class="string">'['</span> <span class="keyword">in</span> GetOpnd(addr, <span class="number">1</span>) <span class="keyword">or</span> <span class="string">'loc_'</span> <span class="keyword">in</span> GetOpnd(addr, <span class="number">1</span>)) <span class="keyword">and</span>(<span class="string">'offset '</span> <span class="keyword">in</span> GetOpnd(addr, <span class="number">1</span>) <span class="keyword">or</span> <span class="string">'h'</span> <span class="keyword">in</span> GetOpnd(addr, <span class="number">1</span>)):</div><div class="line">            from_reg = GetOpnd(addr, <span class="number">0</span>)</div><div class="line">            <span class="comment"># Check for second part</span></div><div class="line">            addr_2 = FindCode(addr, SEARCH_DOWN)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                dest_reg = GetOpnd(addr_2, <span class="number">0</span>)[GetOpnd(addr_2, <span class="number">0</span>).index(<span class="string">'['</span>) + <span class="number">1</span>:GetOpnd(addr_2, <span class="number">0</span>).index(<span class="string">'['</span>) + <span class="number">4</span>]</div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> GetMnem(addr_2) == <span class="string">'mov'</span> <span class="keyword">and</span> dest_reg <span class="keyword">in</span> VALID_DEST <span class="keyword">and</span> (<span class="string">'[%s'</span> % dest_reg) <span class="keyword">in</span> GetOpnd(addr_2, <span class="number">0</span>) <span class="keyword">and</span> GetOpnd(addr_2, <span class="number">1</span>) == from_reg:</div><div class="line">                <span class="comment"># Check for last part, could be improved</span></div><div class="line">                addr_3 = FindCode(addr_2, SEARCH_DOWN)</div><div class="line">                <span class="keyword">if</span> GetMnem(addr_3) == <span class="string">'mov'</span> <span class="keyword">and</span> ((<span class="string">'[%s+'</span> % dest_reg) <span class="keyword">in</span> GetOpnd(addr_3, <span class="number">0</span>) <span class="keyword">or</span> GetOpnd(addr_3, <span class="number">0</span>) <span class="keyword">in</span> VALID_DEST) <span class="keyword">and</span> <span class="string">'offset '</span> <span class="keyword">not</span> <span class="keyword">in</span> GetOpnd(addr_3, <span class="number">1</span>) <span class="keyword">and</span> <span class="string">'dword ptr ds'</span> <span class="keyword">not</span> <span class="keyword">in</span> GetOpnd(addr_3, <span class="number">1</span>):</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        dumb_int_test = GetOperandValue(addr_3, <span class="number">1</span>)</div><div class="line">                        <span class="keyword">if</span> dumb_int_test &gt; <span class="number">0</span> <span class="keyword">and</span> dumb_int_test &lt; sys.maxsize:</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">                    <span class="keyword">except</span> ValueError:</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_string</span><span class="params">(addr, string_len)</span>:</span></div><div class="line">    debug(<span class="string">'Found string load @ 0x%x with length of %d'</span> % (addr, string_len))</div><div class="line">    <span class="comment"># This may be overly aggressive if we found the wrong area...</span></div><div class="line">    <span class="keyword">if</span> GetStringType(addr) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> GetString(addr) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> len(GetString(addr)) != string_len:</div><div class="line">        debug(<span class="string">'It appears that there is already a string present @ 0x%x'</span> % addr)</div><div class="line">        MakeUnknown(addr, string_len, DOUNK_SIMPLE)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> GetString(addr) <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> MakeStr(addr, addr + string_len):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># If something is already partially analyzed (incorrectly) we need to MakeUnknown it</span></div><div class="line">        MakeUnknown(addr, string_len, DOUNK_SIMPLE)</div><div class="line">        <span class="keyword">if</span> MakeStr(addr, addr + string_len):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        debug(<span class="string">'Unable to make a string @ 0x%x with length of %d'</span> % (addr, string_len))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>The above code could likely be optimized, however it was working for me on the samples I needed. All that would be left is to create another function which hunts through all the defined code segments to look for string loads. Then we can use the pointer to the string and the string length to define a new string using the <code>MakeStr</code>. In the code I ended up using, you need to ensure that IDA Pro hasn’t mistakenly already create the string, as it sometimes tries to, incorrectly. This seems to happen sometimes when a string in the table contains a null character. However, after using code above, this is what we are left with;</p>
<p><img src="/images/reversing_go_binaries_like_a_pro/stripped_rex_strings.png" alt=""></p>
<p>This is a much better piece of code to work with. After we throw together all these functions, we now have the <a href="https://github.com/strazzere/golang_loader_assist/blob/master/golang_loader_assist.py" target="_blank" rel="external">golang_loader_assist.py</a> module for IDA Pro. A word of warning though, I have only had time to test this on a few versions of IDA Pro for OSX, the majority of testing on 6.95. There is also very likely optimizations which should be made or at a bare minimum some reworking of the code. With all that said, I wanted to open source this so others could use this and hopefully contribute back. Also be aware that this script can be painfully slow depending on how large the <code>idb</code> file is, working on a OSX El Capitan (10.11.6) using a 2.2 GHz Intel Core i7 on IDA Pro 6.95 - the string discovery aspect itself can take a while. I’ve often found that running the different methods seperately can prevent IDA from locking up. Hopefully this blog and the code proves useful to someone though, enjoy!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GO binaries are weird, or at least, that is where this all started out. While delving into some &lt;a href=&quot;http://securityaffairs.co/wordpr
    
    </summary>
    
    
      <category term="golang" scheme="https://rednaga.github.io/tags/golang/"/>
    
      <category term="research" scheme="https://rednaga.github.io/tags/research/"/>
    
      <category term="ida pro" scheme="https://rednaga.github.io/tags/ida-pro/"/>
    
  </entry>
  
  <entry>
    <title>Detecting Pirated and Malicious Android Apps with APKiD</title>
    <link href="https://rednaga.github.io/2016/07/31/detecting_pirated_and_malicious_android_apps_with_apkid/"/>
    <id>https://rednaga.github.io/2016/07/31/detecting_pirated_and_malicious_android_apps_with_apkid/</id>
    <published>2016-07-31T07:00:00.000Z</published>
    <updated>2016-08-01T06:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android apps are much easier to modify than those of traditional desktop operating systems like Windows or Linux, and there’s primarily only <em>one</em> way to modify Android apps after they have been compiled from source: <a href="https://mvnrepository.com/artifact/org.smali/dexlib2" target="_blank" rel="external">dexlib</a>. Even if you’re actually using <a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a> or <a href="https://github.com/JesusFreke/smali" target="_blank" rel="external">Smali</a>, they are both using dexlib under the hood. Actually, Apktool uses Smali, and Smali and dexlib are part of the same project.</p>
<p>Why is this important? Any app which has had malware injected into it or has been cracked or pirated will have <em>probably</em> been disassembled and recompiled by dexlib. Also, there are very few reasons why a developer with access to the source code would use dexlib. Therefore, you know an app has been modified by dexlib, it’s probably interesting to you if you’re worried about malware or app piracy. This is where <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a> comes in. In addition to detecting packers, obfuscators, and other weird stuff, it can also identify if an app was compiled by the standard Android compilers or dexlib.<br><a id="more"></a></p>
<h1 id="APKiD"><a href="#APKiD" class="headerlink" title="APKiD"></a>APKiD</h1><p>APKiD can look at an Android APK or DEX file and detect the fingerprints of several different compilers:</p>
<ul>
<li>dx - standard Android SDK compiler</li>
<li>dexmerge - used for incremental builds by some IDEs (after using dx)</li>
<li>dexlib 1.x</li>
<li>dexlib 2.x beta</li>
<li>dexlib 2.x</li>
</ul>
<p>If any of the dexlib families have been used to create a DEX file, you can be fairly suspicious it has been cracked and it may have been injected with malware. For more info on how we used compiler fingerprinting to detect malware and cracks, check out our talk <a href="/2016/07/30/apkid_and_android_compiler_fingerprinting/">Android Compiler Fingerprinting</a>.</p>
<h2 id="Detecting-dx-and-dexmerge"><a href="#Detecting-dx-and-dexmerge" class="headerlink" title="Detecting dx and dexmerge"></a>Detecting dx and dexmerge</h2><p>The main way dx and dexmerge are identified are by looking at the ordering of the map types in the DEX file.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_type_order.png" alt=""></p>
<p>This is a good place to identify different compilers because the order is not defined in the spec so it’s up to the compiler how it wants to order these things.</p>
<p>In order to have something that’s copy / paste-able, here’s some Java code for the normal type order:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TypeCode[] NORMAL_TYPE_ORDER = <span class="keyword">new</span> TypeCode[] &#123;</div><div class="line">  TypeCode.HEADER_ITEM,</div><div class="line">  TypeCode.STRING_ID_ITEM,</div><div class="line">  TypeCode.TYPE_ID_ITEM,</div><div class="line">  TypeCode.PROTO_ID_ITEM,</div><div class="line">  TypeCode.FIELD_ID_ITEM,</div><div class="line">  TypeCode.METHOD_ID_ITEM,</div><div class="line">  TypeCode.CLASS_DEF_ITEM,</div><div class="line">  TypeCode.ANNOTATION_SET_REF_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_ITEM,</div><div class="line">  TypeCode.CODE_ITEM,</div><div class="line">  TypeCode.ANNOTATIONS_DIRECTORY_ITEM,</div><div class="line">  TypeCode.TYPE_LIST,</div><div class="line">  TypeCode.STRING_DATA_ITEM,</div><div class="line">  TypeCode.DEBUG_INFO_ITEM,</div><div class="line">  TypeCode.ANNOTATION_ITEM,</div><div class="line">  TypeCode.ENCODED_ARRAY_ITEM,</div><div class="line">  TypeCode.CLASS_DATA_ITEM,</div><div class="line">  TypeCode.MAP_LIST</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>The dexmerge type order was derived by looking at <a href="http://osxr.org/android/source/dalvik/dx/src/com/android/dx/merge/DexMerger.java#0111" target="_blank" rel="external">DexMerger.java</a>. I got the typeIds order by looking <a href="http://osxr.org/android/source/dalvik/dx/src/com/android/dx/merge/DexMerger.java#0904" target="_blank" rel="external">here</a>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TypeCode[] DEXMERGE_TYPE_ORDER = <span class="keyword">new</span> TypeCode[] &#123;</div><div class="line">  TypeCode.HEADER_ITEM,</div><div class="line">  TypeCode.STRING_ID_ITEM,</div><div class="line">  TypeCode.TYPE_ID_ITEM,</div><div class="line">  TypeCode.PROTO_ID_ITEM,</div><div class="line">  TypeCode.FIELD_ID_ITEM,</div><div class="line">  TypeCode.METHOD_ID_ITEM,</div><div class="line">  TypeCode.CLASS_DEF_ITEM,</div><div class="line">  TypeCode.MAP_LIST,</div><div class="line">  TypeCode.TYPE_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_REF_LIST,</div><div class="line">  TypeCode.ANNOTATION_SET_ITEM,</div><div class="line">  TypeCode.CLASS_DATA_ITEM,</div><div class="line">  TypeCode.CODE_ITEM,</div><div class="line">  TypeCode.STRING_DATA_ITEM,</div><div class="line">  TypeCode.DEBUG_INFO_ITEM,</div><div class="line">  TypeCode.ANNOTATION_ITEM,</div><div class="line">  TypeCode.ENCODED_ARRAY_ITEM,</div><div class="line">  TypeCode.ANNOTATIONS_DIRECTORY_ITEM</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>In general, the format of a DEX file and the items inside are like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">header</div><div class="line">  HEADER_ITEM</div><div class="line">stringIds</div><div class="line">  STRING_ID_ITEM</div><div class="line">typeIds</div><div class="line">  TYPE_ID_ITEM</div><div class="line">protoIds</div><div class="line">  PROTO_ID_ITEM</div><div class="line">fieldIds</div><div class="line">  FIELD_ID_ITEM</div><div class="line">methodIds</div><div class="line">  METHOD_ID_ITEM</div><div class="line">classDefs</div><div class="line">  CLASS_DEF_ITEM</div><div class="line">wordData (sort by TYPE)</div><div class="line">  ANNOTATION_SET_REF_LIST</div><div class="line">  ANNOTATION_SET_ITEM</div><div class="line">  CODE_ITEM</div><div class="line">  ANNOTATIONS_DIRECTORY_ITEM</div><div class="line">typeLists (no sort)</div><div class="line">  TYPE_LIST</div><div class="line">stringData (sort by INSTANCE)</div><div class="line">  STRING_DATA_ITEM</div><div class="line">byteData (sort by TYPE)</div><div class="line">  DEBUG_INFO_ITEM</div><div class="line">  ANNOTATION_ITEM</div><div class="line">  ENCODED_ARRAY_ITEM</div><div class="line">classData (no sort)</div><div class="line">  CLASS_DATA_ITEM</div><div class="line">map (no sort)</div><div class="line">  MAP_LIST</div></pre></td></tr></table></figure>
<p>This list may be handy for ongoing research into fingerprinting different compilers.</p>
<h2 id="Detecting-dexlib-1-x"><a href="#Detecting-dexlib-1-x" class="headerlink" title="Detecting dexlib 1.x"></a>Detecting dexlib 1.x</h2><p>This is the first library that allowed disassembling and compiling of DEX files without the source code. It was created by Ben “Jesus Freke” Gruver. It’s detected primarily by looking at the physical sorting of the strings.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_string_sort.png" alt=""></p>
<p>The DEX format requires that the string table, which list all the strings and their offset into the file, must be sorted alphabetically, but the actual physical ordering of the strings in the file are not necessarily sorted. So while dx sorts strings alphabetically, even though it doesn’t have to, dexlib seems to sort them physically based on when they’re encountered during compilation.</p>
<p>A lot of commercial packers and obfuscators and certain malware families still use dexlib 1.x under the hood because it’s pretty solid and they’re too lazy to update.</p>
<h2 id="Detecting-dexlib-2-x-beta"><a href="#Detecting-dexlib-2-x-beta" class="headerlink" title="Detecting dexlib 2.x beta"></a>Detecting dexlib 2.x beta</h2><p>Dexlib 1.x was rewritten into dexlib 2, and while it was in a beta release, we noticed that it did something weird with how it marked class interfaces.</p>
<p><img src="/images/detecting_pirated_and_malicious_android_apps_with_apkid/abnormal_class_interfaces.png" alt=""></p>
<p>You can see <code>AC 27 00 00</code> all over the file. That’s the offset to the “null” interface for classes which don’t implement any interface. It’s a good example of how flexible the DEX format is, because I would figure this wouldn’t run at all, but it does. The dx compiler just uses <code>00</code>s to indicate that there’s no interface.</p>
<p>This was removed before dexlib 2.x was moved out of beta.</p>
<h2 id="Detecting-dexlib-2-x"><a href="#Detecting-dexlib-2-x" class="headerlink" title="Detecting dexlib 2.x"></a>Detecting dexlib 2.x</h2><p>This compiler is also detected by also looking at the map type order. Assembling a DEX file is complex and there are a lot of tiny little details you need to mimic to create an absolutely perfect facsimile. That’s a lot of extra work most developers don’t want to do.</p>
<p>As an aside, I spend a lot of time using this library and looking at it’s code while working on a generic Android deobfuscator called <a href="https://travis-ci.org/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>. And I’ve got to say, it’s some really impressive and <em>clean</em> code that I’ve learned a lot from. Kudos to <a href="https://github.com/JesusFreke" target="_blank" rel="external">Ben</a>.</p>
<h1 id="Using-APKiD"><a href="#Using-APKiD" class="headerlink" title="Using APKiD"></a>Using APKiD</h1><p>The usage of APKiD is quite simple. You just point it at folders, files, whatever, and it’ll try and find APKs and DEX files. It’ll also decompose APKs and try and find compressed APKs, DEX, and ELF files. Here’s output of an example run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ apkid test-data/apk test-data/dex</div><div class="line">[!] APKiD 0.9.3 :: from RedNaga :: rednaga.io</div><div class="line">[*] test-data/dex/dexguard1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard2.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard3.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexlib1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/dex/dexlib2.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/dex/dexmerge.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge)</div><div class="line">[*] test-data/dex/dexprotector1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector2.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector3.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dx.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div></pre></td></tr></table></figure>
<p>You can see that the test samples of DexGuard and DexProtector both use dexlib 1.x. APKiD also supports JSON output so it’s easier to integrate into other toolchains:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"test-data/dex/dexprotector1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexProtect"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexlib1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard3.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"anti_disassembly"</span>: [</div><div class="line">      <span class="string">"illegal class name"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexlib2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 2.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard1.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexmerge.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"Android SDK (dexmerge)"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dx.dex"</span>: &#123;</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"Android SDK (dx)"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexguard2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexGuard"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"anti_disassembly"</span>: [</div><div class="line">      <span class="string">"illegal class name"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test-data/dex/dexprotector2.dex"</span>: &#123;</div><div class="line">    <span class="attr">"obfuscator"</span>: [</div><div class="line">      <span class="string">"DexProtect"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"compiler"</span>: [</div><div class="line">      <span class="string">"dexlib 1.x"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Ideas-for-the-Future"><a href="#Ideas-for-the-Future" class="headerlink" title="Ideas for the Future"></a>Ideas for the Future</h2><p>This post leaves out all of the Android XML fingerprinting details <a href="https://github.com/strazzere" target="_blank" rel="external">Tim</a> researched that can identify tools like Apktool. We still need to add these fingerprints into APKiD.</p>
<p>There is also a library called ASMDEX which looks capable of creating DEX files. At the time of this original research a few years ago, I didn’t have time to look into it, and no one was talking about how to use it. A lot of the stuff was over my head, but I’ve since had a lot of practice using ASM to create Java class files, so I think I can manage now. It would be nice to add fingerprints for ASMDEX. Anything created by that would probably be pretty weird.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android apps are much easier to modify than those of traditional desktop operating systems like Windows or Linux, and there’s primarily only &lt;em&gt;one&lt;/em&gt; way to modify Android apps after they have been compiled from source: &lt;a href=&quot;https://mvnrepository.com/artifact/org.smali/dexlib2&quot;&gt;dexlib&lt;/a&gt;. Even if you’re actually using &lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot;&gt;Apktool&lt;/a&gt; or &lt;a href=&quot;https://github.com/JesusFreke/smali&quot;&gt;Smali&lt;/a&gt;, they are both using dexlib under the hood. Actually, Apktool uses Smali, and Smali and dexlib are part of the same project.&lt;/p&gt;
&lt;p&gt;Why is this important? Any app which has had malware injected into it or has been cracked or pirated will have &lt;em&gt;probably&lt;/em&gt; been disassembled and recompiled by dexlib. Also, there are very few reasons why a developer with access to the source code would use dexlib. Therefore, you know an app has been modified by dexlib, it’s probably interesting to you if you’re worried about malware or app piracy. This is where &lt;a href=&quot;https://github.com/rednaga/APKiD&quot;&gt;APKiD&lt;/a&gt; comes in. In addition to detecting packers, obfuscators, and other weird stuff, it can also identify if an app was compiled by the standard Android compilers or dexlib.&lt;br&gt;
    
    </summary>
    
    
      <category term="research" scheme="https://rednaga.github.io/tags/research/"/>
    
      <category term="apkid" scheme="https://rednaga.github.io/tags/apkid/"/>
    
  </entry>
  
  <entry>
    <title>APKiD and Android Compiler Fingerprinting</title>
    <link href="https://rednaga.github.io/2016/07/30/apkid_and_android_compiler_fingerprinting/"/>
    <id>https://rednaga.github.io/2016/07/30/apkid_and_android_compiler_fingerprinting/</id>
    <published>2016-07-30T07:00:00.000Z</published>
    <updated>2016-08-01T06:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>We recently gave a presentation at <a href="http://hitcon.org/2016/CMT/" target="_blank" rel="external">HITCON 2016</a> called <a href="http://hitcon.org/2016/CMT/slide/day1-r0-e-1.pdf" target="_blank" rel="external">Android Compiler Fingerprinting</a><br> where in we released a tool called: <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a>. It’s basically PEiD for Android – it detects several compilers, obfuscators, and packers and we’re adding to it whenever we find new stuff. You’re welcome to submit your rules also.</p>
<p>Here’s the full abstract:</p>
<blockquote>
<p>Compiler fingerprinting is a technique for identifying the compiler used to create a binary. This is because there is some flexibility in file formats, and different compilers usually produce binaries with identical behaviors but with subtle differences in structure and organization. We developed a tool which can determine the compiler used to create Dalvik executables and Android binary XML files. This allowed us to distinguish between apps compiled from original source code and apps which had been modified using non-standard compilers such as dexlib. Our hypothesis was that the two primary reasons reasons for modifying an Android app were for 1.) cracking and piracy and 2.) injecting malicious code. We tested this assumption by comparing the compiler profiles of various app markets with varying tolerances for cracked and malicious apps to see if the percentage of modified apps was inversely proportional to how strict the store was about policing submissions. We found that strict markets such as Google Play and Amazon had significantly lower rates of modified apps compared to less strict markets such as Aptoide and BlapkMarket. Additionally, we analyzed ~138,000 benign apps and known malware samples to compare the rates of modification between both groups. We found much higher rates of modification within the malware sample set with many malware families consisting entirely of modified apps.</p>
<p>This talk presents the history and evolution of various Android tools, introduces tools for fingerprinting compilers, summarizes the technical details for how the tools work, and reviews applications for using compiler fingerprinting to improve detection and classification of malware and pirated apps.</p>
</blockquote>
<p>We’ll post the video of our talk as soon as it’s available!</p>
<a id="more"></a>
<p>This is the output when it’s run against our test files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">$ apkid test-data</div><div class="line">[!] APKiD 0.9.3 :: from RedNaga :: rednaga.io</div><div class="line">[*] test-data/apk/dexguard1.apk!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/dexguard2.apk!classes.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/dexguard_6_1.apk!classes.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/apk/pikekapril.apk!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : Bitwise AntiSkid</div><div class="line">[*] test-data/dex/big-endian.dex</div><div class="line"> |-&gt; abnormal : non little-endian format</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/dexguard1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard2.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexguard3.dex</div><div class="line"> |-&gt; anti_disassembly : illegal class name</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexGuard</div><div class="line">[*] test-data/dex/dexlib1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/dex/dexlib2.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/dex/dexmerge.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge)</div><div class="line">[*] test-data/dex/dexprotector1.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector2.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dexprotector3.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line"> |-&gt; obfuscator : DexProtect</div><div class="line">[*] test-data/dex/dx.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non-standard-header.dex</div><div class="line"> |-&gt; abnormal : non-standard header size</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non_zero_link_offset.dex</div><div class="line"> |-&gt; abnormal, anti_disassembly : non-zero link offset</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/dex/non_zero_link_size.dex</div><div class="line"> |-&gt; abnormal, anti_disassembly : non-zero link size</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/alibaba/apk/071d9e73a1badf763bc6bb843c51c208ad17c91b24192e79f045ed1e4fc8148a</div><div class="line"> |-&gt; packer : Alibaba</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337</div><div class="line"> |-&gt; packer : APKProtect</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/apkprotect/9ac20091b8e82c8ff2882422450e30c03043136ca009affe59e51edabf753337!res/raw/ister2015050620.apk</div><div class="line"> |-&gt; packer : Bangcle</div><div class="line">[*] test-data/samples/baidu/ae369707b32a37f2b5c78f27418f90c54c7f84d5fd8f96a9e1595e27182b3173</div><div class="line"> |-&gt; packer : Baidu</div><div class="line">[*] test-data/samples/baidu/ae369707b32a37f2b5c78f27418f90c54c7f84d5fd8f96a9e1595e27182b3173!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413</div><div class="line"> |-&gt; packer : Bangcle</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/bangcle/a1f851511e9ca191a97a295f7edb9bb44694b413!assets/com.mobi.screensaver.kansiphone3</div><div class="line"> |-&gt; packer : Bangcle/SecNeo (UPX)</div><div class="line">[*] test-data/samples/bangcle/elf/bf286487b7bbd549b8cdb00dc9a80a5404ed68103ff0fffd94a85907db9c439d</div><div class="line"> |-&gt; packer : newer-style Bangcle/SecNeo (UPX)</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3</div><div class="line"> |-&gt; packer : Ijiami</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/ijiami/6d19105bedeebad4140e9b212baae4063cbd01f3!assets/ijm_lib/armeabi/libexec.so</div><div class="line"> |-&gt; packer : Ijiami (UPX)</div><div class="line">[*] test-data/samples/jiangu/f8493d91c4250cff4d4f9a47538a2b0b39f7c4d87e6fe4035d4c304c70b5ad1c</div><div class="line"> |-&gt; packer : Jiangu</div><div class="line">[*] test-data/samples/jiangu/f8493d91c4250cff4d4f9a47538a2b0b39f7c4d87e6fe4035d4c304c70b5ad1c!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/kiro/061af556e934fec5fdcbec732bc7128cbf5a45012310fc8ee2f39e26bd81e982</div><div class="line"> |-&gt; packer : Kiro</div><div class="line">[*] test-data/samples/kiro/061af556e934fec5fdcbec732bc7128cbf5a45012310fc8ee2f39e26bd81e982!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/level/c2d3ceea0dda80e80d7def8e9ea127b9a633208ffcb106c5db3674e1c58baac4</div><div class="line"> |-&gt; packer : &apos;qdbh&apos; (?)</div><div class="line">[*] test-data/samples/liapp/b5be20d225edf55634621aa17988a6ed3368d4f7632c8a1eb4d3fc3b6a61c325</div><div class="line"> |-&gt; packer : LIAPP</div><div class="line">[*] test-data/samples/liapp/b5be20d225edf55634621aa17988a6ed3368d4f7632c8a1eb4d3fc3b6a61c325!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 2.x</div><div class="line">[*] test-data/samples/medusa/b92c0090038f3185908f2fb3b7e927da734040b9332332fc09542e20c615e083</div><div class="line"> |-&gt; packer : Medusa</div><div class="line">[*] test-data/samples/medusa/b92c0090038f3185908f2fb3b7e927da734040b9332332fc09542e20c615e083!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/naga/89297d34ee79adf8390a173aefd31e65c47e18c7dfc0a3f1508ca2255991efb2</div><div class="line"> |-&gt; packer : Naga</div><div class="line">[*] test-data/samples/naga/89297d34ee79adf8390a173aefd31e65c47e18c7dfc0a3f1508ca2255991efb2!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dx)</div><div class="line">[*] test-data/samples/nqshield/997a3986cc8437772b569d0319044764a1cbac9d296af01d77c857b887c49b48</div><div class="line"> |-&gt; packer : NQ Shield</div><div class="line">[*] test-data/samples/nqshield/997a3986cc8437772b569d0319044764a1cbac9d296af01d77c857b887c49b48!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/qihoo360/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727</div><div class="line"> |-&gt; packer : Qihoo 360, Tencent</div><div class="line">[*] test-data/samples/qihoo360/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/rootkit/5ddda7355599a1819e03ee881e56453f492f6cf03674347513bf26f83b81a415</div><div class="line"> |-&gt; packer : UPX (unknown, unmodified)</div><div class="line">[*] test-data/samples/tencent/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727</div><div class="line"> |-&gt; packer : Qihoo 360, Tencent</div><div class="line">[*] test-data/samples/tencent/66126fb7d5977cf8dbac401330f25d06a9101680874ae43eb6bd201f2b92c727!classes.dex</div><div class="line"> |-&gt; compiler : dexlib 1.x</div><div class="line">[*] test-data/samples/unicom_sdk/bb11a710258077213ce4281e78a1c19a940c02dc3ddaa5f1d8046380173e0da7</div><div class="line"> |-&gt; packer : Unicom SDK Loader</div><div class="line">[*] test-data/samples/unicom_sdk/bb11a710258077213ce4281e78a1c19a940c02dc3ddaa5f1d8046380173e0da7!classes.dex</div><div class="line"> |-&gt; compiler : Android SDK (dexmerge), dexlib 1.x</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We recently gave a presentation at &lt;a href=&quot;http://hitcon.org/2016/CMT/&quot;&gt;HITCON 2016&lt;/a&gt; called &lt;a href=&quot;http://hitcon.org/2016/CMT/slide/day1-r0-e-1.pdf&quot;&gt;Android Compiler Fingerprinting&lt;/a&gt;&lt;br&gt; where in we released a tool called: &lt;a href=&quot;https://github.com/rednaga/APKiD&quot;&gt;APKiD&lt;/a&gt;. It’s basically PEiD for Android – it detects several compilers, obfuscators, and packers and we’re adding to it whenever we find new stuff. You’re welcome to submit your rules also.&lt;/p&gt;
&lt;p&gt;Here’s the full abstract:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compiler fingerprinting is a technique for identifying the compiler used to create a binary. This is because there is some flexibility in file formats, and different compilers usually produce binaries with identical behaviors but with subtle differences in structure and organization. We developed a tool which can determine the compiler used to create Dalvik executables and Android binary XML files. This allowed us to distinguish between apps compiled from original source code and apps which had been modified using non-standard compilers such as dexlib. Our hypothesis was that the two primary reasons reasons for modifying an Android app were for 1.) cracking and piracy and 2.) injecting malicious code. We tested this assumption by comparing the compiler profiles of various app markets with varying tolerances for cracked and malicious apps to see if the percentage of modified apps was inversely proportional to how strict the store was about policing submissions. We found that strict markets such as Google Play and Amazon had significantly lower rates of modified apps compared to less strict markets such as Aptoide and BlapkMarket. Additionally, we analyzed ~138,000 benign apps and known malware samples to compare the rates of modification between both groups. We found much higher rates of modification within the malware sample set with many malware families consisting entirely of modified apps.&lt;/p&gt;
&lt;p&gt;This talk presents the history and evolution of various Android tools, introduces tools for fingerprinting compilers, summarizes the technical details for how the tools work, and reviews applications for using compiler fingerprinting to improve detection and classification of malware and pirated apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’ll post the video of our talk as soon as it’s available!&lt;/p&gt;
    
    </summary>
    
    
      <category term="research" scheme="https://rednaga.github.io/tags/research/"/>
    
      <category term="apkid" scheme="https://rednaga.github.io/tags/apkid/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to RedNaga</title>
    <link href="https://rednaga.github.io/2016/07/19/welcome/"/>
    <id>https://rednaga.github.io/2016/07/19/welcome/</id>
    <published>2016-07-19T07:00:00.000Z</published>
    <updated>2016-08-01T06:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to our  blog. More to come shortly…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to our  blog. More to come shortly…&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
